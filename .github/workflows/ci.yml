name: ci

on: [push, pull_request]

jobs:
  rust:
    name: deno_graph-${{ matrix.os }}
    if: |
      github.event_name == 'push' ||
      !startsWith(github.event.pull_request.head.label, 'denoland:')
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-2019]

    env:
      CARGO_INCREMENTAL: 0
      GH_ACTIONS: 1
      RUST_BACKTRACE: full
      RUSTFLAGS: -D warnings

    steps:
      - name: ‚òëÔ∏è clone repository
        uses: actions/checkout@v2

      - name: ‚û°Ô∏è  install rust
        uses: hecrj/setup-rust-action@v1.3.4
        with:
          rust-version: 1.55.0

      - name: ‚û°Ô∏è  install clippy and rustfmt
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: üóÉÔ∏è  cache
        uses: Swatinem/rust-cache@v1

      - name: ‚û°Ô∏è  install up Deno
        uses: denoland/setup-deno@v1.0.0
        with:
          deno-version: 1.x

      - name: üíÑ  format
        if: contains(matrix.os, 'ubuntu')
        run: |
          cargo fmt -- --check
          deno fmt --check *.ts lib/*.ts schemas .vscode .github

      - name: üíÑ  lint
        if: contains(matrix.os, 'ubuntu')
        run: |
          cargo clippy --locked --release --all-features --all-targets -- -D clippy::all
          deno lint *.ts lib/

      - name: üèóÔ∏è  build
        run: cargo build --locked --release --all-features --all-targets

      - name: üß™  test
        run: |
          cargo test --locked --release --all-features --all-targets
          deno test --allow-read --allow-net

  wasm:
    name: "wasm/"
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          # required to check for changes
          fetch-depth: 2
          submodules: false
          persist-credentials: false

      - name: Set up Deno
        uses: denoland/setup-deno@v1.0.0

      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          # This must match the version in hash/_wasm/rust-toolchain:
          rust-version: 1.55.0
          targets: wasm32-unknown-unknown
          components: rustfmt

      - name: Set up wasm-bindgen-cli
        run: |-
          # This must match the version in Cargo.lock:
          cargo install -f wasm-bindgen-cli --version 0.2.74

      - name: Rebuild WASM
        run: |-
          ./_build.ts

      - name: Verify WASM hasn't changed
        id: build
        run: |-
          set -o errexit
          shopt -s inherit_errexit
          declare modifications="$(git status --porcelain)"
          declare modified="$([[ "$(git status --porcelain)" ]] && echo true || echo false)"
          echo "::set-output name=modified::$modified"
          echo "Generated code modified? $modified"
          echo "$modifications"

          if [[ "$modified" = "true" ]]; then
            echo "::error ::Rebuilt WASM doesn't match committed WASM. Please rebuild and commit."
            exit 1
          fi

      - name: Upload rebuilt ./lib/ as artifact if it didn't match committed
        if: failure() && steps.build.outputs.modified == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: Rebuilt _wasm_crypto
          path: |-
            ./lib/deno_graph_bg.wasm
            ./lib/deno_graph.generated.js
            ./lib/snippets
